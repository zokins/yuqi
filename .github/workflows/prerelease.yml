name: Pre-Release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: "The release tag"
        required: true
        type: choice
        options:
          - alpha
          - beta
          - rc

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      id-token: write
      packages: write
      pull-requests: write
      issues: read
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v3

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: "${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}"
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Set changesets to prerelease mode
        run: pnpm changeset pre enter ${{ inputs.tag }}

      - name: Evaluate pre-release version
        run: pnpm version-packages

      - name: Get pre-release version
        id: pre-release-version
        uses: martinbeentjes/npm-get-version-action@3cf273023a0dda27efcd3164bdfb51908dd46a5b
        with:
          path: packages/core

      - name: Reset changes
        run: git checkout .

      - name: Get latest published version and strip tag
        id: package-versions
        run: |
          export LATEST_PUBLISHED_VERSION=$(pnpm dlx latest-version-cli @yuqijs/core --range=${{ inputs.tag }})
          export CURRENT_PRERELEASE_VERSION=${{ steps.pre-release-version.outputs.current-version }}
          echo "latest_version=${LATEST_PUBLISHED_VERSION}" >> $GITHUB_OUTPUT
          echo "latest_version_stripped=${LATEST_PUBLISHED_VERSION%-*}" >> $GITHUB_OUTPUT
          echo "project_version_stripped=${CURRENT_PRERELEASE_VERSION%-*}" >> $GITHUB_OUTPUT

      - name: Set to latest published version so we can bump to next version
        if: ${{ steps.package-versions.outputs.latest_version_stripped  == steps.package-versions.outputs.project_version_stripped }}
        uses: jaywcjlove/github-action-package@f6a7afaf74f96a166243f05560d5af4bd4eaa570
        with:
          path: packages/core/package.json
          version: "${{ steps.package-versions.outputs.latest_version }}"

      - name: Reset pre-release mode
        run: |
          rm .changeset/pre.json
          pnpm changeset pre enter ${{ inputs.tag }}

      - name: Update versions in all packages
        run: pnpm version-packages

      - name: Modify "workspaces" value in package.json
        run: sed -e "s;packages/core;dist/packages/core;g" package.json > package-new.json && mv package-new.json package.json

      - name: Get Release Version
        id: release-version
        uses: martinbeentjes/npm-get-version-action@3cf273023a0dda27efcd3164bdfb51908dd46a5b
        with:
          path: packages/core

      - if: ${{ contains(steps.release-version.outputs.current-version, '-') }}
        name: Create Release Pull Request or Publish to npm
        uses: dotansimha/changesets-action@069996e9be15531bd598272996fa23853d61590e
        with:
          title: Release Tracking
          publish: pnpm release
          version: ":"
          createGithubReleases: aggregate
          githubReleaseName: v${{ steps.release-version.outputs.current-version }}
          githubTagName: v${{ steps.release-version.outputs.current-version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
